<?php

class Router {
	private $registry;
	private $autoloader;
	private $controller;
	
	function __construct($url, $registry, $autoloader) {
		// Ensure the registry object is loaded
		if(get_class($registry) != 'Registry') die("Registry must be an object of the class registry."); 
			else $this->registry = $registry;
		// Ensure the autoloader is loaded into the router.
		if(get_class($autoloader) != 'Autoloader') die("Autoloader must be an obeject of the class autoloader."); 
			else $this->autoloader = $autoloader;
		if($url == ' ') $url = array('url' => 'index'); 
		$url = $this->prep_url($url); // Prepare the url string.
		$page = strtolower($url[0]); 
		// Sets the pathway to the controller
		$path = $this->registry->get_register('CONTROLLERS');
		$suffix = $this->registry->get_register('CONTROLLERSNAME');
		$ds = $this->registry->get_register('DS');
		$fileName = $path . $ds . $page . $suffix . ".php";  
		if(file_exists($fileName)) { // If controller matches the url, instantiate it. 
			$className = $page . $suffix;
			$this->autoloader->set_pathway($path); 
			$this->controller = $controller = new $className($this->registry);
			// Call any methods if specified, along with it's methods.
			$this->call_action($url);
		} else {
			$this->load_error_page();
		}
	}
	
	// Loads the default error page if a controller cannot be located.
	private function load_error_page() {
		if(empty($this->registry)) die("Registry has not been added to router.");
		$path = $this->registry->get_register('CONTROLLERS');
		$suffix = $this->registry->get_register('CONTROLLERSNAME');
		$className = 'error' . $suffix;
		$this->autoloader->set_pathway($path);
		$this->controller = $controller = new $className($this->registry);
	}
	
	// Prep the url ztring, exploding it into an array and trimming any excess trailing /s
	private function prep_url($url) { 
		$url = $this->validate_url($url['url']);
		return $url = explode('/', rtrim($url, '/'));  	
	}
	
	// Applies sanitition to the url string.		
	private function validate_url($url) {
		return filter_var($url, FILTER_SANITIZE_URL);
	}
	
	// Calls methods within the controller if with arguments if specified.
	private function call_action($url = array()) {
		if(empty($this->controller)) die("No valid controller has been loaded.");
		if(sizeof($url) > 1) { // More than 1 elements signifies a method in the controller being called.
			$args = array_slice($url, 1);  // First element, the controller name, is unnecessary and removed.
			$method = array_shift($args); // Method name is shifted off of the array
			if(method_exists($this->controller,  $method)) { // Remaining array elements are args for the method.
				$reflection = new ReflectionMethod($this->controller, $method);
				$reflection->invokeArgs($this->controller, $args);
			}
		}
	}

}

?>
